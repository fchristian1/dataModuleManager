services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: dmm_frontend_react
    container_name: dmm_frontend_react
    volumes:
      - ./frontend:/app
    working_dir: /app
    command: npm run dev
    ports:
      - "8080:3000"
  backend_gateway:
    build:
      context: ./backend/gateway
      dockerfile: Dockerfile
    image: dmm_backend_gateway
    container_name: dmm_backend_gateway
    volumes:
      - ./backend/gateway:/app
    working_dir: /app
    command: npm run dev
    ports:
      - "3000:3000"
    environment:
      - DATA_BACKEND_URL=${DATA_BACKEND_URL}
  backend_auth:
    build:
      context: ./backend/auth
      dockerfile: Dockerfile
    image: dmm_backend_auth
    container_name: dmm_backend_auth
    volumes:
      - ./backend/auth:/app
    working_dir: /app
    command: npm run dev
    environment:
      - DATA_BACKEND_URL=${DATA_BACKEND_URL}
  backend_view:
    build:
      context: ./backend/view
      dockerfile: Dockerfile
    image: dmm_backend_view
    container_name: dmm_backend_view
    volumes:
      - ./backend/view:/app
    working_dir: /app
    command: npm run dev
    environment:
      - DATA_BACKEND_URL=${DATA_BACKEND_URL}
  backend_module:
    build:
      context: ./backend/module
      dockerfile: Dockerfile
    image: dmm_backend_module
    container_name: dmm_backend_module
    volumes:
      - ./backend/module:/app
    working_dir: /app
    command: npm run dev
    environment:
      - DATA_BACKEND_URL=${DATA_BACKEND_URL}
  backend_data:
    build:
      context: ./backend/datamanager
      dockerfile: Dockerfile
    image: dmm_backend_data
    container_name: dmm_backend_data
    volumes:
      - ./backend/datamanager:/app
    working_dir: /app
    command: npm run dev
    environment:
      - DATA_BACKEND_URL=${DATA_BACKEND_URL}
      - MONGO_URL=${MONGO_URL}
  backend_mongo:
    image: mongo
    container_name: dmm_backend_mongo
    ports:
      - "27017:27017"
    volumes:
      - ./data/mongodb:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}

  backend_mongoexpress:
    image: mongo-express
    container_name: dmm_backend_mongoexpress
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_SERVER=backend_mongo
      - ME_CONFIG_MONGODB_AUTH_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - DEBUG=mongo-express:*
    depends_on:
      - backend_mongo
    entrypoint: >
      /bin/sh -c "
        echo 'Warte auf MongoDB...';
        for i in $(seq 1 10); do
          nc -z backend_mongo 27017 && break;
          echo 'Mongo noch nicht erreichbar, warte...';
          sleep 2;
        done;
        echo 'Starte mongo-express';
        exec tini -- node app"
